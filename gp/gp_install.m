function gp_install(suiteSparse)

% Compile the 'trcov' mex-function
    if ispc   % A windows version of Matlab
        mex -O -output trcov winCsource\trcov.c 
    else
        mex -O -output trcov linuxCsource/trcov.c 
    end


% If you install 'sinv' by hand comment the code from below and run matlab_install in 
% GPstuff directory

    
% Compile the 'sinv' mex-function
% This is awfully long since 'sinv' needs all the functionalities of SuiteSparse


details = 0 ;	    % 1 if details of each command are to be printed
    
    v = getversion ;
    try
        % ispc does not appear in MATLAB 5.3
        pc = ispc ;
    catch
        % if ispc fails, assume we are on a Windows PC if it's not unix
        pc = ~isunix ;
    end

    d = '' ;
    if (~isempty (strfind (computer, '64')))
        % 64-bit MATLAB
        d = '-largeArrayDims' ;
    end
    
    include = '-I../../AMD/Include -I../../COLAMD/Include -I../../CCOLAMD/Include -I../../CAMD/Include -I../Include -I../../UFconfig' ;
    
    include = strrep(include, '../../', suiteSparse);
    cholmod_path = [suiteSparse 'CHOLMOD/'];
    include = strrep(include, '../', cholmod_path);

if (v < 7.0)
    % do not attempt to compile CHOLMOD with large file support
    include = [include ' -DNLARGEFILE'] ;
elseif (~pc)
    % Linux/Unix require these flags for large file support
    include = [include ' -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE'] ;
end

% Determine the METIS path, and whether or not METIS is available
metis_path = [suiteSparse 'metis-4.0'];
have_metis = (~isempty (metis_path)) ;
include = [include ' -I' metis_path '/Lib'] ;

% Determine the SuiteSparse/CHOLMOD/MATLAB path
include = ['-I' cholmod_path 'MATLAB' ' ' include] ;
cholmodMATLAB_path = [cholmod_path 'MATLAB/']; 

%-------------------------------------------------------------------------------
% BLAS option
%-------------------------------------------------------------------------------

% This is exceedingly ugly.  The MATLAB mex command needs to be told where to
% fine the LAPACK and BLAS libraries, which is a real portability nightmare.

if (pc)
    if (v < 7.5)
        lapack = 'libmwlapack.lib' ;
    else
        lapack = 'libmwlapack.lib libmwblas.lib' ;
    end
else
    if (v < 7.5)
        lapack = '-lmwlapack' ;
    else
        lapack = '-lmwlapack -lmwblas' ;
    end
end

%-------------------------------------------------------------------------------

include = strrep (include, '/', filesep) ;

amd_src = { ...
    'amd_1', ...
    'amd_2', ...
    'amd_aat', ...
    'amd_control', ...
    'amd_defaults', ...
    'amd_dump', ...
    'amd_global', ...
    'amd_info', ...
    'amd_order', ...
    'amd_postorder', ...
    'amd_post_tree', ...
    'amd_preprocess', ...
    'amd_valid' } ;

camd_src = { ...
    'camd_1', ...
    'camd_2', ...
    'camd_aat', ...
    'camd_control', ...
    'camd_defaults', ...
    'camd_dump', ...
    'camd_global', ...
    'camd_info', ...
    'camd_order', ...
    'camd_postorder', ...
    'camd_preprocess', ...
    'camd_valid' } ;

colamd_src = {
    'colamd', ...
    'colamd_global' } ;

ccolamd_src = {
    'ccolamd', ...
    'ccolamd_global' } ;

metis_src = {
    'balance', ...
    'bucketsort', ...
    'ccgraph', ...
    'coarsen', ...
    'compress', ...
    'debug', ...
    'estmem', ...
    'fm', ...
    'fortran', ...
    'frename', ...
    'graph', ...
    'initpart', ...
    'kmetis', ...
    'kvmetis', ...
    'kwayfm', ...
    'kwayrefine', ...
    'kwayvolfm', ...
    'kwayvolrefine', ...
    'match', ...
    'mbalance2', ...
    'mbalance', ...
    'mcoarsen', ...
    'memory', ...
    'mesh', ...
    'meshpart', ...
    'mfm2', ...
    'mfm', ...
    'mincover', ...
    'minitpart2', ...
    'minitpart', ...
    'mkmetis', ...
    'mkwayfmh', ...
    'mkwayrefine', ...
    'mmatch', ...
    'mmd', ...
    'mpmetis', ...
    'mrefine2', ...
    'mrefine', ...
    'mutil', ...
    'myqsort', ...
    'ometis', ...
    'parmetis', ...
    'pmetis', ...
    'pqueue', ...
    'refine', ...
    'separator', ...
    'sfm', ...
    'srefine', ...
    'stat', ...
    'subdomains', ...
    'timing', ...
    'util' } ;

cholmod_matlab = { 'cholmod_matlab' } ;

cholmod_src = {
    'cholmod_aat', ...
    'cholmod_add', ...
    'cholmod_band', ...
    'cholmod_change_factor', ...
    'cholmod_common', ...
    'cholmod_complex', ...
    'cholmod_copy', ...
    'cholmod_dense', ...
    'cholmod_error', ...
    'cholmod_factor', ...
    'cholmod_memory', ...
    'cholmod_sparse', ...
    'cholmod_transpose', ...
    'cholmod_triplet', ...
    'cholmod_check', ...
    'cholmod_read', ...
    'cholmod_write', ...
    'cholmod_amd', ...
    'cholmod_analyze', ...
    'cholmod_colamd', ...
    'cholmod_etree', ...
    'cholmod_factorize', ...
    'cholmod_postorder', ...
    'cholmod_rcond', ...
    'cholmod_resymbol', ...
    'cholmod_rowcolcounts', ...
    'cholmod_rowfac', ...
    'cholmod_solve', ...
    'cholmod_spsolve', ...
    'cholmod_drop', ...
    'cholmod_horzcat', ...
    'cholmod_norm', ...
    'cholmod_scale', ...
    'cholmod_sdmult', ...
    'cholmod_ssmult', ...
    'cholmod_submatrix', ...
    'cholmod_vertcat', ...
    'cholmod_symmetry', ...
    'cholmod_rowadd', ...
    'cholmod_rowdel', ...
    'cholmod_updown', ...
    'cholmod_super_numeric', ...
    'cholmod_super_solve', ...
    'cholmod_super_symbolic', ...
    'cholmod_ccolamd', ...
    'cholmod_csymamd', ...
    'cholmod_camd', ...
    'cholmod_metis', ...
    'cholmod_nesdis' } ;

if (pc)
    % Windows does not have drand48 and srand48, required by METIS.  Use
    % drand48 and srand48 in CHOLMOD/MATLAB/Windows/rand48.c instead.
    obj_extension = '.obj' ;
    cholmod_matlab = [cholmod_matlab {'Windows/rand48'}] ;
    include = [include ' -IWindows'] ;
else
    obj_extension = '.o' ;
end

obj = '' ;

source = [amd_src colamd_src ccolamd_src camd_src cholmod_src cholmod_matlab] ;
if (have_metis)
    source = [metis_src source] ;
end

kk = 0 ;

% set the object files 
for f = source
    o = [cholmodMATLAB_path f{1}];
    obj = [obj  ' ' o obj_extension] ;
end


% compile mexFunction
mex_src =  'linuxCsource/sinv';
kk=0;
s = sprintf ('mex %s -DDLONG -O %s %s.c', d, include, mex_src) ;
s = [s obj];
s = [s ' '];
s = [s lapack];
kk = do_cmd (s, kk, details) ;


%-------------------------------------------------------------------------------
function kk = do_cmd (s, kk, details)
%DO_CMD: evaluate a command, and either print it or print a "."
if (details)
    fprintf ('%s\n', s) ;
else
    if (mod (kk, 60) == 0)
	fprintf ('\n') ;
    end
    kk = kk + 1 ;
    fprintf ('.') ;
end
eval (s) ;

%-------------------------------------------------------------------------------
function v = getversion
% determine the MATLAB version, and return it as a double.
v = sscanf (version, '%d.%d.%d') ;
v = 10.^(0:-1:-(length(v)-1)) * v ;
